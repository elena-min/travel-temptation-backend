package org.individualproject.business;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import org.individualproject.business.converter.ExcursionConverter;
import org.individualproject.domain.CreateExcursionRequest;
import org.individualproject.domain.Excursion;
import org.individualproject.persistence.ExcursionRepository;
import org.individualproject.persistence.entity.ExcursionEntity;
import org.individualproject.persistence.implementation.FakePostRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;

//This annotation says to use the MockitoExtension class, who is responsible for initializing the Mockito framework for the tests
@ExtendWith(MockitoExtension.class)
class ExcursionServiceTest {

    //Creates a Mock object of this class
    @Mock
    private ExcursionRepository excursionRepository;

    //This object is going to be initialized using the Mock objects
    @InjectMocks
    private ExcursionService excursionService;
    @Test
    void getExcursions() {
        // Arrange
        List<ExcursionEntity> fakeExcursions = Arrays.asList(
                new ExcursionEntity(
                        1L,
                        "Mountain Hike",
                        "Mount Everest Base Camp, Annapurna Circuit",
                        new Date(), // replace with actual date
                        new Date(), // replace with actual date
                        "Adventure Tours",
                        1500.0,
                        23
                ),

          new ExcursionEntity(
                  2L,
                "City Tour",
                "Paris, Rome, Barcelona",
                new Date(), // replace with actual date
                new Date(), // replace with actual date
                "City Explorers",
                1200.0,
                  29

        ),

        new ExcursionEntity(
                3L,
                "Beach Getaway",
                "Maldives, Phuket, Bora Bora",
                new Date(), // replace with actual date
                new Date(), // replace with actual date
                "Sunshine Travel",
                2000.0,
                209
        ));
        List<Excursion> excursions = ExcursionConverter.mapToDomainList(fakeExcursions);

        when(excursionRepository.findAll()).thenReturn(fakeExcursions);

        // Act
        List<Excursion> result = excursionService.getExcursions();

        // Assert
        assertEquals(excursions, result);
    }

    @Test
    void getExcursion() {
        ExcursionEntity fakeExcursion = ExcursionEntity.builder()
                .name("Mountain Hike")
                .destinations("Mount Everest Base Camp, Annapurna Circuit")
                .startDate(new Date()) // replace with actual date
                .endDate(new Date()) // replace with actual date
                .travelAgency("Adventure Tours")
                .price(1500.0)
                .numberOfAvaliableSpaces(58)
                .build();

        fakeExcursion.setId(1L); // Simulate that this entity has been saved and has an autogenerated ID

        Excursion excursion = ExcursionConverter.mapToDomain(fakeExcursion);
        Long id = 1L;
        when(excursionRepository.findById(id)).thenReturn(Optional.of(fakeExcursion));

        // Act
        Optional<Excursion> result = excursionService.getExcursion(id);

        // Assert
        assertEquals(Optional.of(excursion), result);
    }


    @Test
    void createExcursion() {
        ExcursionEntity savedExcursionEntity = ExcursionEntity.builder()
                .id(1L)
                .name("Test Excursion")
                .destinations("Destination1,Destination2")
                .startDate(new Date(System.currentTimeMillis() + 1000000))
                .endDate(new Date(System.currentTimeMillis() + 2000000))
                .travelAgency("Test Agency")
                .price(1000.0)
                .build();

        // Mock the excursionRepository
        when(excursionRepository.save(any(ExcursionEntity.class))).thenReturn(savedExcursionEntity);

        CreateExcursionRequest createRequest = CreateExcursionRequest.builder()
                .name("Test Excursion")
                .destinations(Arrays.asList("Destination1", "Destination2"))
                .startDate(new Date(System.currentTimeMillis() + 1000000))
                .endDate(new Date(System.currentTimeMillis() + 2000000))
                .travelAgency("Test Agency")
                .price(1000.0)
                .build();
        // Act:
        Excursion createdExcursion = excursionService.createExcursion(createRequest);

        // Assert
        verify(excursionRepository, times(1)).save(any(ExcursionEntity.class));

    }
}